---
- name: Generate db_uuid
  shell:
    cmd: uuidgen |sed 's/^[^-]*/16315fff/'
  register: db_uuid

- name: Generate server_id
  shell:
    cmd: echo $RANDOM |cksum |cut -c 1-8
  register: server_id

# create dir for db
- name: Create dir for db
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ db_install_user }}"
    group: "{{ db_install_group }}"
    mode: 0755
  with_items:
    - "{{ install_tmpdir }}"
    - "{{ db_app_dir }}"
    - "{{ db_app_base_dir }}"
    - "{{ db_dbdata_dir }}"
    - "{{ db_data_dir }}"
    - "{{ db_conf_dir }}"
    - "{{ db_log_dir }}"
    - "{{ db_tmp_dir }}"
    - "{{ db_pid_dir }}"
    - "{{ db_socket_dir }}"
    - "{{ xtrabackup_base_dir }}"

- name: Get  glibc version
  shell: ldd --version | head -n 1 | awk '{print $NF}'
  register: glibc_version_output
  when: db_package_glibc is not defined  or db_package_glibc == '' 

- name:  Set db_package_glibc variable
  set_fact:
    db_package_glibc: "{{ glibc_version_output.stdout }}"
    glibc_version_matched: true
  when: db_package_glibc is not defined  or db_package_glibc == '' 

- name: Check glibc version 
  fail:
    msg: "不支持的 glibc 版本：{{ db_package_glibc }} ,仅支持 2.17 或 2.28。"
  when: db_package_glibc not in ['2.17', '2.28']

- name: Copy db_package and percona_xtrabackup_package_name to install_tmpdir
  copy:
    src: "{{ item }}"
    dest: "{{ install_tmpdir }}/"
    owner: "{{ db_install_user }}"
    group: "{{ db_install_group }}"
  when: db_package_name is defined and percona_xtrabackup_package_name is defined
  loop: 
    - "{{ db_package_name }}"
    - "{{ percona_xtrabackup_package_name }}"

- name: Extract db_package to db_app_base_dir
  unarchive:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: true
    owner: "{{ db_install_user }}"
    group: "{{ db_install_group }}"
    extra_opts:
      - --strip-components=1
  loop:
    - { src: "{{ install_tmpdir }}/{{ db_package_name }}", dest: "{{ db_app_base_dir }}"}
    - { src: "{{ install_tmpdir }}/{{ percona_xtrabackup_package_name }}", dest: "{{ xtrabackup_base_dir }}"}
  when: db_package_name is defined and percona_xtrabackup_package_name is defined

- name: Link xtrabackup command to bin dir
  become: yes
  file:
    src: "{{ xtrabackup_base_dir }}/bin/xtrabackup"
    dest: "/usr/local/bin/xtrabackup"
    state: link
    force: yes
  when: db_package_name is defined and percona_xtrabackup_package_name is defined

- name: Copy my.cnf.j2 template
  template:
    src: my.cnf.j2
    dest: "{{ db_conf_dir }}/my{{ db_port }}.conf"
    owner: "{{ db_install_user }}"
    group: "{{ db_install_group }}"
    mode: "0644"
  when: db_port is defined

- name: Init DB
  shell:
    cmd: "{{ db_bin_dir }}/{{ db_client }}d --defaults-file={{ db_conf_dir }}/my{{ db_port }}.conf --initialize-insecure --user={{ db_install_user }}"

- name: Start DB
  shell:
    cmd: "nohup {{ db_bin_dir }}/{{ db_client }}d_safe --defaults-file={{ db_conf_dir }}/my{{ db_port }}.conf --user={{ db_install_user }} &"

- name: Add DB env variables to ~/.bashrc
  blockinfile:
    dest: ~/.bashrc
    block: |
      export PATH="{{ db_bin_dir }}:$PATH"
    marker: "# {mark} DB environment variables"
    state: present